// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	models "server/models"

	mock "github.com/stretchr/testify/mock"

	repository "server/repository"
)

// MeasurementService is an autogenerated mock type for the MeasurementService type
type MeasurementService struct {
	mock.Mock
}

// ConfigureRepoMeasurement provides a mock function with given fields: _a0
func (_m *MeasurementService) ConfigureRepoMeasurement(_a0 repository.MeasurementRepo) {
	_m.Called(_a0)
}

// Create provides a mock function with given fields: measurement
func (_m *MeasurementService) Create(measurement models.Measurement) (interface{}, error) {
	ret := _m.Called(measurement)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(models.Measurement) interface{}); ok {
		r0 = rf(measurement)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Measurement) error); ok {
		r1 = rf(measurement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *MeasurementService) GetAll() (interface{}, error) {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SensorAvarageValue provides a mock function with given fields: sensorID, deviceID, startTime, endTime
func (_m *MeasurementService) SensorAvarageValue(sensorID string, deviceID string, startTime string, endTime string) (float64, error) {
	ret := _m.Called(sensorID, deviceID, startTime, endTime)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, string, string, string) float64); ok {
		r0 = rf(sensorID, deviceID, startTime, endTime)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(sensorID, deviceID, startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SensorsCorrelationCoefficient provides a mock function with given fields: sensorID1, deviceID1, sensorID2, deviceID2, startTime, endTime
func (_m *MeasurementService) SensorsCorrelationCoefficient(sensorID1 string, deviceID1 string, sensorID2 string, deviceID2 string, startTime string, endTime string) (float64, error) {
	ret := _m.Called(sensorID1, deviceID1, sensorID2, deviceID2, startTime, endTime)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) float64); ok {
		r0 = rf(sensorID1, deviceID1, sensorID2, deviceID2, startTime, endTime)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = rf(sensorID1, deviceID1, sensorID2, deviceID2, startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
